openapi: 3.1.0
info:
  title: Wide Delivery Mobile Client API
  version: 0.0.1
  description: "The client API for Android app"
  contact:
    email: stanislavmatsak@gmail.com
    name: Stanislav Matsak, Wide Delivery client API developer

servers:
  - url: http://widedelivery.localhost/api
  - url: client-api:3000

paths:
  /auth/register:
    post:
      description: Register the user.
      tags:
        - auth
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Registration'
      responses:
        '201':
          description: User registered successfully.
        '409':
          description: Registration failed. Maybe email was used before
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HandledError'
  /auth/login:
    post:
      description: Login the user. Receive access_token and refresh_token pair.
      tags:
        - auth
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: User signed-in successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokens'
        '401':
          description: Email or password is incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HandledError'
        '500':
          description: Internal error.

  /auth/oauth:
    post:
      description: Login or register the user with OAuth token. Receive access_token and refresh_token pair.
      tags:
        - auth
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              properties:
                oauth_token:
                  type: string
                  description: OAuth token, received from provider (e.g. Google)
              example:
                oauth_token: "eyJhbGciOiJSUzI1NiIsImtpZCI6IjA4YmY1YzM3NzJkZDRlN2E3MjdhMTAxYmY1MjBmNjU3NWNhYzMyNmYiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJhenAiOiI1NDg0OTIwMTc1MjUtMmkwMGtyMG5yMTRhY21yZnZyMHByMHNqYmJqYWJpbzUuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhdWQiOiI1NDg0OTIwMTc1MjUtdXI1ajZ0ZnJvcjBnNHVkZmMxMmN2bWJqbzVidnZubDEuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJzdWIiOiIxMDQwNzI5MDIwOTc1NjE2NTYzMDQiLCJlbWFpbCI6ImFydHBhZGFuQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiQXJ0ZW0gUGFkYWxrYSIsInBpY3R1cmUiOiJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vYS9BQ2c4b2NJR2ZlcmdWUmVpbldQazNHcGtuSDhBQUFjTHVrVWFvQzhOMWV4YU0tVE5oa289czk2LWMiLCJnaXZlbl9uYW1lIjoiQXJ0ZW0iLCJmYW1pbHlfbmFtZSI6IlBhZGFsa2EiLCJsb2NhbGUiOiJlbiIsImlhdCI6MTcxMDAyMjE4MiwiZXhwIjoxNzEwMDI1NzgyfQ.TBSKetAcGRdPKLDvGnVNk0FhIsUrD8tZuU6tIOecB9611LV12pyP3wpfyrRBylWnu1BcD4xy4NL4hwdpBR7vR04PRPraneShYaAHJILPOncmYfGLkP11D8Yefp-asCSna_n6eHMw3jwHgyiMh13v1W6RsB7hkeNAnRF6JSOUD3P_MYWUQgitqJgkkzCqeqnllL-YeMW067IR3XrCnCAJ8I6ND8PP6IQU53JZfBWbOgNjTPd99NX8GKl6ZcTVHhAGBI73xzbgawgPo3ihxB-h-zzZXGvZ36o-oLkVHURRHrpsgJiGfqHYNc_yode4ptcQaczobWsrdvVroSyCB3g81A"
      responses:
        '200':
          description: User signed-in successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokens'
        '401':
          description: OAuth token cannot be verified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HandledError'
        '500':
          description: Internal error.
  /auth/refresh:
    post:
      description: Login or register the user with OAuth token. Receive access_token and refresh_token pair.
      tags:
        - auth
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  description: Refresh token, needed to receive new pair of tokens
              example:
                refresh_token: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2NWVkZDNhNGI1YTkzZWQyZDI0ZWQxYzEiLCJpYXQiOjE3MTI4NzI3MTMsImV4cCI6MTcxMjg3OTkxM30.hufhjto58P7QpnKJQ3jbgIz5cYCxNS4aMuB7PCKqbKWAmj3ptGt2cV6VX-p8ATX1S3qBHth1rXAvMF-zGh6Ln6UUpnxL-2MbH-2xULnSYZWOVk20HDDbMusIWA_WdEeT7k936E29Hc8vdccNm286WVgxP8GZV81uYL6900XbFLY"
      responses:
        '200':
          description: New tokens received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokens'
        '500':
          description: Internal error.

  /auth/me:
      get:
        description: Get info about user. NEED BEARER TOKEN TO PASS IN REQUEST HEADERS!
        tags:
          - auth
        security:
          - bearerAuth: [ ]
        responses:
          '200':
            description: User's info.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserSchema'
          '500':
            description: Internal error.


  /orders:
    post:
      description: Create new order
      tags:
        - picking
        - order
        - reservation
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Successfully created order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: No Auth
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: string
  /order/{orderId}:
    get:
      description: Get order by ID
      tags:
        - picking
        - order
        - reservation
      parameters:
        - in: path
          name: orderId
          schema:
              type: string
          required: true
          description: String ID of the order to get
      responses:
        '200':
          description: Successfully created order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: No Auth
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: string
        '500':
          description: Internal error.


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Order:
      type: object
      required:
        - username
      properties:
        cargoLength:
          type: double
          description: 'Length of the cargo'
        cargoWidth:
          type: double
          description: 'Width of the cargo'
        cargoHeight:
          type: double
          description: 'Height of the cargo'
        cargoType:
          type: string # TODO replace with custom cargo type enum
          description: 'Type of the cargo'
        description:
          type: string
          description: 'Description of the cargo and additional notes from client for the driver'
        needLoader:
          type: boolean
          description: 'Does the client need an additional loader?'
        departureLongitude:
          type: string
          description: 'X of <from> point'
        departureLatitude:
          type: number
          format: double
          description: 'Y of <from> point'
        departureTime: # IS NEEDED ?
          type: string
          description: 'Cargo should be picked up before ... in format [YYYY-MM-DDThh:mm:ss]'
        destinationLongitude:
          type: number
          format: double
          description: 'X of <to> point'
        destinationLatitude:
          type: number
          format: double
          description: 'Y of <to> point'
        destinationTime: # IS NEEDED ?
          type: string
          description: 'Cargo should be delivered until ... in format [YYYY-MM-DDThh:mm:ss]'
        orderCreationTime:
          type: string
          description: 'Order creation time in format [YYYY-MM-DDThh:mm:ss]'
    Registration:
      type: object
      required:
        - email
        - password
      properties:
        name:
          type: string
          description: User name
        email:
          type: string
          description: User email
        password:
          type: string
          description: User password
        provider:
          type: string
          description: (Optional) Should be local for now. Google sign-in uses another endpoint
      example:
        name: 'Stooosy'
        email: 'example-mail@gmail.com'
        password: 'bla-bla-artem-yhylyant123'
        provider: 'local'
    Login:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: User email
        password:
          type: string
          description: User password
      example:
        email: 'example-mail@gmail.com'
        password: 'bla-bla-artem-yhylyant123'
    AccessTokens:
      type: object
      properties:
        access_token:
          type: string
          description: Token which should be used as Bearer Token when sending requests to the API.
        refresh_token:
          type: string
          description: This token is used to receive new access_token without sign-out the user from the app.
    UserSchema:
      type: object
      properties:
        name:
          type: string
          description: User's name
        email:
          type: string
          description: User's email
        photo:
          type: string
          description: User's photo URL
        phoneNumber:
          type: string
          description: User's phone number
        provider:
          type: string
          description: User's provider (local/google) - may be needed to show visualization of current log-in method (show <you were signed-in with Google>)
    HandledError:
      type: object
      properties:
        status:
          type: string
          description: failed
        message:
          type: string
          description: Message you can display on UI for the user.

#
#security:
#  - bearerAuth: [ ]

